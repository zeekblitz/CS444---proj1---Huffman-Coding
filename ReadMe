I lost the original ReadMe for this project so here is a new one.

For this project we were expected to use a Huffman coding binary tree to compress a text file. For the sample text we had to use the complete works of William Shakespeare. It was a great sample to use because of its sheer volume and the fact that all of his works are public domain. The sample text file was over 5 and a half megabytes in size and we were expected to match the output of our proffessors output file which ended up being just over 3 megabytes.

Huffman coding works by adding up the frequency, or the number of times a character appears in a given text, sorting it from highest to lowest and then using that to build a binary tree. Then recursively go through the tree and add a 1 or a 0 for going left or right exclusively. This would give the characters with the highest frequency the fewest number of bits and the characters with the lowest frequency the most number of bits. We then store those bits into a file that will be a compressed version of the original text file. This compression method is known as lossless because we can reverse the process and get back the exact same original text without any artifacting like a jpeg image might have.

I think most implementations of the Huffman algorithm use whats called a minHeap and build the tree from the top down. However for my implementation I built the tree from the ground up by first putting the sorted list of character frequencies into a linked list then went through the list and connected the first two nodes to a parent node and gave that node the combined value of its childrens frequencies then resorted the list with the parent node, doing this until there was only one node left in the list.

The only slowdown to my program is that once the tree is built, in order to get the binary code for each ascii character in the sample text, my program goes down the tree for every single character. I had planned to add a lookup table by storing the binary codes in a jagged array, but I had to turn in the project before I could implement this. I would however like to come back to this project however and implement that as well as make the program accessible through a web interface.

Update, I was able to add a jagged array that is used as a lookup table and now the program runs 5x faster. Now to make it work with a web interface such as web assembly, and also add the ability to reverse the output file to its original state.